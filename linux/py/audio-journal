#!/usr/bin/env python3

import argparse
import boto3
import itertools
import json
import logging

s3 = boto3.resource('s3')

logger = None
def setup_logger(level):
    l = logging.getLogger('audio-journal')
    l.setLevel(level)

    ch = logging.StreamHandler()
    ch.setLevel(level)

    f = logging.Formatter(
        fmt='%(asctime)s:%(name)s:%(levelname)s %(message)s',
        datefmt='%Y-%m-%dT%H:%M:%S%z')
    ch.setFormatter(f)

    l.addHandler(ch)

    return l

def parse_args():
    parser = argparse.ArgumentParser(description="Audio Journal command line interface")
    subparsers = parser.add_subparsers(help="sub-commands", dest='command', required=True)

    parser.add_argument("--log", default="WARN", help="set log level")
    parser.add_argument("--bucket", default="rootmos-sounds", help="S3 bucket")

    list_cmd = subparsers.add_parser("list", help="list sounds")
    list_cmd.add_argument("prefix", metavar="PREFIX", nargs="*")

    record = subparsers.add_parser("record", help="record track")

    return parser.parse_args()

class Sound:
    def __init__(self):
        pass

def list_cmd(args):
    b = s3.Bucket(args.bucket)

    if len(args.prefix) == 0:
        i = b.objects.all()
    else:
        i = itertools.chain(*[b.objects.filter(Prefix=p) for p in args.prefix])

    ms = []
    for o in i:
        if not o.key.endswith(".json"):
            continue
        j = json.loads(o.get()["Body"].read())
        logger.debug(j)

def record_cmd(args):
    raise NotImplementedError

if __name__ == "__main__":
    args = parse_args()
    logger = setup_logger(args.log.upper())
    logger.debug(f"args: {args}")

    if args.command == "list":
        list_cmd(args)
    elif args.command == "record":
        record_cmd(args)
    else:
        raise NotImplementedError(f"subcommand {args.command}")
